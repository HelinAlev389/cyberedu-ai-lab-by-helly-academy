import os
import io

import markdown2
from flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify, send_file
from flask_login import login_required, current_user
from werkzeug.utils import secure_filename

from services.openai_service import generate_image_url
from utils.pdf_export import export_to_pdf, sanitize_filename

from extensions import db
from models import User, AISession
from models.ai_memory import AIMemory
from models.lesson import Lesson
from .forms import LessonForm

teacher_dashboard_bp = Blueprint('teacher_dashboard', __name__, url_prefix='/teacher')
UPLOAD_FOLDER = os.path.join("static", "uploads")
os.makedirs(UPLOAD_FOLDER, exist_ok=True)


@teacher_dashboard_bp.route('/lessons', methods=['GET', 'POST'])
@login_required
def manage_lessons():
    if current_user.role not in ['teacher', 'admin']:
        flash("–ù—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ —Ç–∞–∑–∏ —Å–µ–∫—Ü–∏—è.", "danger")
        return redirect(url_for('main.index'))

    form = LessonForm()
    if form.validate_on_submit():
        lesson = Lesson(
            title=form.title.data,
            topic=form.topic.data,
            content=form.content.data,
            created_by=current_user.id
        )
        db.session.add(lesson)
        db.session.commit()
        flash("–£—Ä–æ–∫—ä—Ç –µ —Å—ä–∑–¥–∞–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "success")
        return redirect(url_for('teacher_dashboard.manage_lessons'))

    lessons = Lesson.query.all()
    return render_template('teacher/lessons.html', form=form, lessons=lessons)


@teacher_dashboard_bp.route('/lesson/<int:lesson_id>')
@login_required
def view_lesson(lesson_id):
    lesson = Lesson.query.get_or_404(lesson_id)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –Ω–∞ Markdown —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –≤ HTML
    html_content = markdown2.markdown(lesson.content, extras=["fenced-code-blocks", "tables", "code-friendly"])

    from services.recommendation_service import recommend_lessons_for
    recommend_lessons_for(current_user.id)

    return render_template('teacher/lesson_view.html', lesson=lesson, html_content=html_content)


@teacher_dashboard_bp.route('/progress')
@login_required
def view_progress():
    if current_user.role not in ['teacher', 'admin']:
        flash("–ù—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ —Ç–∞–∑–∏ —Å–µ–∫—Ü–∏—è.", "danger")
        return redirect(url_for('main.index'))

    from models.ai_memory import AIMemory
    from models.user import User

    # –í–∑–µ–º–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 100 —Å—ä–±–∏—Ç–∏—è
    memory = AIMemory.query.order_by(AIMemory.created_at.desc()).limit(100).all()

    # –ì—Ä—É–ø–∏—Ä–∞–π –ø–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –∏ —Ç–∞–≥–æ–≤–µ
    progress_map = {}
    for mem in memory:
        progress_map.setdefault(mem.user_id, []).append(mem)

    users = User.query.filter_by(role='student').all()
    return render_template('teacher/progress.html', users=users, progress=progress_map)


@teacher_dashboard_bp.route('/upload_image', methods=['POST'])
@login_required
def upload_image():
    file = request.files.get('image')
    if not file:
        return jsonify({'error': 'No file uploaded'}), 400

    filename = secure_filename(file.filename)
    filepath = os.path.join(UPLOAD_FOLDER, filename)
    file.save(filepath)

    url = f"/static/uploads/{filename}"
    return jsonify({'success': 1, 'file': {'url': url}})


@teacher_dashboard_bp.route('/lesson/<int:lesson_id>/edit', methods=['GET', 'POST'])
@login_required
def edit_lesson(lesson_id):
    lesson = Lesson.query.get_or_404(lesson_id)

    if current_user.role not in ['teacher', 'admin']:
        flash("–ù—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ —Ç–∞–∑–∏ —Å–µ–∫—Ü–∏—è.", "danger")
        return redirect(url_for('main.index'))

    form = LessonForm(obj=lesson)

    if form.validate_on_submit():
        lesson.title = form.title.data
        lesson.topic = form.topic.data
        lesson.content = form.content.data
        db.session.commit()
        flash("–£—Ä–æ–∫—ä—Ç –µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!", "success")
        return redirect(url_for('teacher_dashboard.manage_lessons'))

    return render_template('teacher/edit_lesson.html', form=form, lesson=lesson)


@teacher_dashboard_bp.route('/lesson/<int:lesson_id>/export_pdf')
@login_required
def export_lesson_pdf(lesson_id):
    lesson = Lesson.query.get_or_404(lesson_id)

    from utils.pdf_export import export_to_pdf
    html_content = markdown2.markdown(lesson.content)
    pdf_buffer = io.BytesIO()
    export_to_pdf(html_content, "", pdf_buffer)
    pdf_buffer.seek(0)

    filename = f"{lesson.title.replace(' ', '_')}.pdf"
    return send_file(pdf_buffer, mimetype='application/pdf', as_attachment=True, download_name=filename)


@teacher_dashboard_bp.route('/lesson/<int:lesson_id>/delete', methods=['POST'])
@login_required
def delete_lesson(lesson_id):
    lesson = Lesson.query.get_or_404(lesson_id)

    if current_user.role not in ['teacher', 'admin']:
        flash("–ù—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–∞ –∏–∑—Ç—Ä–∏–≤–∞—Ç–µ —É—Ä–æ—Ü–∏.", "danger")
        return redirect(url_for('teacher_dashboard.manage_lessons'))

    db.session.delete(lesson)
    db.session.commit()
    flash("–£—Ä–æ–∫—ä—Ç –±–µ—à–µ —É—Å–ø–µ—à–Ω–æ –∏–∑—Ç—Ä–∏—Ç.", "success")
    return redirect(url_for('teacher_dashboard.manage_lessons'))


@teacher_dashboard_bp.route('/lesson/<int:lesson_id>/publish', methods=['POST'])
@login_required
def publish_lesson(lesson_id):
    lesson = Lesson.query.get_or_404(lesson_id)

    if current_user.role not in ['teacher', 'admin']:
        flash("–ù—è–º–∞—Ç–µ –ø—Ä–∞–≤–∞ –¥–∞ –ø—É–±–ª–∏–∫—É–≤–∞—Ç–µ —É—Ä–æ—Ü–∏.", "danger")
        return redirect(url_for('main.index'))

    lesson.is_published = True
    db.session.commit()
    flash("–£—Ä–æ–∫—ä—Ç –µ –ø—É–±–ª–∏–∫—É–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!", "success")
    return redirect(url_for('teacher_dashboard.manage_lessons'))


@teacher_dashboard_bp.route('/dashboard')
@login_required
def dashboard():
    if current_user.role != 'teacher':
        flash("–ù—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ —Ç–∞–∑–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.", "danger")
        return redirect(url_for('auth.login'))

    return render_template('teacher/dashboard_simple.html', user=current_user)


@teacher_dashboard_bp.route('/test_dashboard')
@login_required
def test_dashboard():
    return f"""
    <h2>–î–æ–±—Ä–µ –¥–æ—à—ä–ª, {current_user.username}!</h2>
    <p>–†–æ–ª—è: <strong>{current_user.role}</strong></p>
    <p>–°—Ç–∞—Ç—É—Å: {'–õ–æ–≥–Ω–∞—Ç —Å–∏' if current_user.is_authenticated else '–ù–µ —Å–∏ –ª–æ–≥–Ω–∞—Ç'}</p>
    """


@teacher_dashboard_bp.route('/dashboard/export_pdf')
@login_required
def export_pdf():
    if current_user.role not in ['teacher', 'admin']:
        flash("–ù—è–º–∞—Ç–µ –¥–æ—Å—Ç—ä–ø –¥–æ —Ç–∞–∑–∏ —Å–µ–∫—Ü–∏—è.", "danger")
        return redirect(url_for('main.index'))

    student_id = request.args.get('student_id', type=int)
    query = AIMemory.query.join(User).order_by(AIMemory.created_at.desc())

    if student_id:
        query = query.filter(AIMemory.user_id == student_id)
        user = User.query.get(student_id)
        filename_base = sanitize_filename(user.username)
    else:
        filename_base = "all_students"

    memories = query.limit(100).all()

    # –°—ä–±–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–µ—Ç–µ
    log_text = ""
    gpt_response = ""

    for mem in reversed(memories):  # —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–Ω–æ
        log_text += f"[{mem.created_at.strftime('%Y-%m-%d %H:%M')}] {mem.user.username}:\n{mem.content}\n\n"
        gpt_response += f"[{mem.tag}] –û—Ü–µ–Ω–∫–∞: {mem.score}\n\n"

    # üìÑ –°—ä–∑–¥–∞–π PDF –≤ –ø–∞–º–µ—Ç—Ç–∞
    pdf_buffer = io.BytesIO()
    export_to_pdf(log_text, gpt_response, pdf_buffer)
    pdf_buffer.seek(0)

    return send_file(
        pdf_buffer,
        mimetype='application/pdf',
        as_attachment=True,
        download_name=f"{filename_base}_ai_report.pdf"
    )


@teacher_dashboard_bp.route('/ai-config', methods=['GET', 'POST'])
@login_required
def set_ai_config(topic=None, difficulty=None, checkpoint=None):
    if current_user.role != 'teacher':
        flash("–°–∞–º–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏–º–∞—Ç –¥–æ—Å—Ç—ä–ø.", "danger")
        return redirect(url_for('auth.login'))

    # –¢—ä—Ä—Å–∏–º –∏–ª–∏ —Å—ä–∑–¥–∞–≤–∞–º–µ —Å–µ—Å–∏—è
    session = AISession.query.filter_by(user_id=current_user.id).first()
    if not session:
        session = AISession(user_id=current_user.id, config={})
        db.session.add(session)
        db.session.commit()

    if request.method == 'POST':
        topic = request.form.get('topic', 'network')
        difficulty = request.form.get('difficulty', 'beginner')
        checkpoint = int(request.form.get('checkpoint', 50))

        session.config = {
            'topic': topic,
            'difficulty': difficulty,
            'checkpoint': checkpoint
        }
        db.session.commit()

        flash("–ù–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ —Å–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ ‚úÖ", "success")
        return redirect(url_for('teacher_dashboard.manage_lessons'))

    notes = request.form.get('notes', '')
    session.config = {
        'topic': topic,
        'difficulty': difficulty,
        'checkpoint': checkpoint,
        'notes': notes
    }

    return render_template('teacher/config_ai.html', cfg=session.config or {})


@teacher_dashboard_bp.route('/generate_lesson', methods=['GET', 'POST'])
@login_required
def generate_lesson():
    if current_user.role != 'teacher':
        flash("–°–∞–º–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏–º–∞—Ç –¥–æ—Å—Ç—ä–ø –¥–æ —Ç–∞–∑–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.", "danger")
        return redirect(url_for('auth.login'))

    session = AISession.query.filter_by(user_id=current_user.id).first()
    if not session or not session.config:
        flash("–ú–æ–ª—è, –ø—ä—Ä–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–π—Ç–µ AI —É—á–∏—Ç–µ–ª—è.", "warning")
        return redirect(url_for('teacher_dashboard.set_ai_config'))

    from services.openai_service import OpenAIService
    ai = OpenAIService()

    cfg = session.config
    topic = cfg.get('topic', 'network')
    difficulty = cfg.get('difficulty', 'beginner')
    notes = cfg.get('notes', '')

    lesson_prompt = f"""
    –°—ä–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–∞–Ω HTML —É—Ä–æ–∫ –ø–æ —Ç–µ–º–∞—Ç–∞ "{topic}" 
    –Ω–∞ –Ω–∏–≤–æ {difficulty}. –í–∫–ª—é—á–∏:

    - –∫—Ä–∞—Ç–∫–æ –≤—ä–≤–µ–¥–µ–Ω–∏–µ —Å –∏–∫–æ–Ω–∞ –∏ –∑–∞–≥–ª–∞–≤–∏–µ
    - –ø–æ–Ω–µ 2 —Ç–µ–º–∞—Ç–∏—á–Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–æ–∂–µ –¥–∞ —Å–∞ –ø—Ä–∏–º–µ—Ä–Ω–∏ URL –∏–ª–∏ alt —Ç–µ–∫—Å—Ç)
    - –∞–Ω–∏–º–∏—Ä–∞–Ω–∏ —Å–µ–∫—Ü–∏–∏ (–∏–∑–ø–æ–ª–∑–≤–∞–π CSS –∫–ª–∞—Å–æ–≤–µ, –Ω–∞–ø—Ä. "fade-in", "slide-in")
    - –º–∏–Ω–∏ –∫—É–∏–∑ —Å 2 –≤—ä–ø—Ä–æ—Å–∞ —Å –≤—ä–∑–º–æ–∂–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏ (—Ä–∞–¥–∏–æ –±—É—Ç–æ–Ω–∏)
    - –∑–∞–≤—ä—Ä—à–µ–∫ —Å –æ–±–æ–±—â–µ–Ω–∏–µ –∏ —Å—ä–≤–µ—Ç

    –ë–µ–ª–µ–∂–∫–∏ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {notes if notes else "–ù—è–º–∞"}
    –ò–∑–ø–æ–ª–∑–≤–∞–π HTML –∏ –∫–ª–∞—Å–æ–≤–µ, –∫–æ–∏—Ç–æ –º–æ–≥–∞—Ç –ª–µ—Å–Ω–æ –¥–∞ —Å–µ —Å—Ç–∏–ª–∏–∑–∏—Ä–∞—Ç.
    """

    try:
        generated_lesson = ai.chat(lesson_prompt)
    except Exception as e:
        flash(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {e}", "danger")
        return redirect(url_for('teacher_dashboard.dashboard'))

    # —Å–ª–µ–¥ lesson_prompt
    image_prompt = f"–°—ä–∑–¥–∞–π –∏–ª—é—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞—Ç–∞ '{topic}' –ø–æ–¥—Ö–æ–¥—è—â–∞ –∑–∞ —É—Ä–æ–∫ –ø–æ {difficulty} –Ω–∏–≤–æ"

    try:
        image_url = generate_image_url(image_prompt)  # —â–µ –Ω–∞–ø—Ä–∞–≤–∏–º —Ç–æ–∑–∏ –º–µ—Ç–æ–¥
    except Exception as e:
        image_url = None

    from .forms import LessonForm
    form = LessonForm(data={
        'title': f"–£—Ä–æ–∫: {topic.capitalize()} ({difficulty})",
        'topic': topic,
        'content': generated_lesson
    })

    if request.method == 'POST' and form.validate_on_submit():
        is_published = form.submit_publish.data  # True –∞–∫–æ –Ω–∞—Ç–∏—Å–Ω–∞—Ç –µ –±—É—Ç–æ–Ω–∞ –∑–∞ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–µ

        lesson = Lesson(
            title=form.title.data,
            topic=form.topic.data,
            content=form.content.data,
            created_by=current_user.id,
            is_published=is_published
        )

        db.session.add(lesson)
        db.session.commit()

        flash("–£—Ä–æ–∫—ä—Ç –µ –∑–∞–ø–∞–∑–µ–Ω —É—Å–ø–µ—à–Ω–æ!" + (" (–ø—É–±–ª–∏–∫—É–≤–∞–Ω)" if is_published else " (–∫–∞—Ç–æ —á–µ—Ä–Ω–æ–≤–∞)"), "success")
        return redirect(url_for('teacher_dashboard.manage_lessons'))

    return render_template('teacher/ai_generated_preview.html', form=form)


@teacher_dashboard_bp.route('/lesson/<int:lesson_id>/submit_quiz', methods=['POST'])
@login_required
def submit_quiz(lesson_id):
    from models.quiz_result import QuizResult

    score = int(request.form.get('score', 0))
    result = QuizResult(user_id=current_user.id, lesson_id=lesson_id, score=score)
    db.session.add(result)
    db.session.commit()

    return jsonify({'status': 'ok'})
