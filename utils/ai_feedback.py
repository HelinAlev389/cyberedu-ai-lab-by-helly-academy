def get_ctf_feedback(username, mission_id, tier, questions, answers, log_data=None):
    feedback = []

    for i, (q, a) in enumerate(zip(questions, answers)):
        fb = f"{i + 1}. –í—ä–ø—Ä–æ—Å: {q}\n–û—Ç–≥–æ–≤–æ—Ä: {a}\n–ê–Ω–∞–ª–∏–∑: TODO - AI —â–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ —Ç–æ–≤–∞."
        feedback.append(fb)

    if log_data:
        feedback.append("\nüîç –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –Ω–∞ –ª–æ–≥ —Ñ–∞–π–ª:\n")
        feedback.append(str(log_data))  # –≤ —Ä–µ–∞–ª–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - —Ñ–æ—Ä–º–∞—Ç –∏ –∞–Ω–∞–ª–∏–∑

    return "\n\n".join(feedback)
import os
from openai import OpenAI

def get_ctf_feedback(username, mission_id, tier, questions, answers):
    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))  # ‚úÖ –∑–∞—Ä–µ–∂–¥–∞ —Å–µ –∫–æ–≥–∞—Ç–æ —Ç—Ä—è–±–≤–∞

    joined = "\n".join([
        f"{i+1}. {q}\n–û—Ç–≥–æ–≤–æ—Ä: {a}" for i, (q, a) in enumerate(zip(questions, answers))
    ])

    prompt = f"""
–¢–∏ —Å–∏ SOC –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä. –°—Ç—É–¥–µ–Ω—Ç—ä—Ç {username} –µ –ø–æ–ø—ä–ª–Ω–∏–ª –º–∏—Å–∏—è {mission_id} - Tier {tier}.
–î–∞–π –æ–±—Ä–∞—Ç–Ω–∞ –≤—Ä—ä–∑–∫–∞ –ø–æ —Å–ª–µ–¥–Ω–∏—Ç–µ –≤—ä–ø—Ä–æ—Å–∏:

{joined}

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
- –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–π –≤—Å—è–∫–∞ —á–∞—Å—Ç –ø–æ–æ—Ç–¥–µ–ª–Ω–æ.
- –î–∞–π –ø—Ä–µ–ø–æ—Ä—ä–∫–∏.
- –û–±—ä—Ä–Ω–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏.
- –ù–∞–ø–∏—à–∏ –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏ —Å –ø—Ä–∏—è—Ç–µ–ª—Å–∫–∏ —Ç–æ–Ω.
"""

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "–¢–∏ —Å–∏ SOC –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ –æ–±—É—á–∞–≤–∞—à —Å—Ç—É–¥–µ–Ω—Ç–∏ –ø–æ –∫–∏–±–µ—Ä—Å–∏–≥—É—Ä–Ω–æ—Å—Ç."},
            {"role": "user", "content": prompt}
        ]
    )

    return response.choices[0].message.content
